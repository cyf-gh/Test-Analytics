// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_Analytics.Service.Database;

namespace Test_Analytics.Service.Migrations
{
    [DbContext(typeof(ACCContext))]
    partial class ACCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("Test_Analytics.Model.AttributeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Tags");

                    b.Property<bool>("ValidOperation");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("AttributeModels");
                });

            modelBuilder.Entity("Test_Analytics.Model.CapabilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttributeId");

                    b.Property<int?>("ComponentId");

                    b.Property<string>("Description");

                    b.Property<int>("FrequencyOfFailure");

                    b.Property<int>("Impact");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Tags");

                    b.Property<bool>("ValidOperation");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CapabilityModels");
                });

            modelBuilder.Entity("Test_Analytics.Model.ComponentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Tags");

                    b.Property<bool>("ValidOperation");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ComponentModels");
                });

            modelBuilder.Entity("Test_Analytics.Model.ProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Editors");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<string>("Owners");

                    b.Property<string>("Viewers");

                    b.HasKey("Id");

                    b.ToTable("ProjectModels");
                });

            modelBuilder.Entity("Test_Analytics.Model.AttributeModel", b =>
                {
                    b.HasOne("Test_Analytics.Model.ProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Test_Analytics.Model.CapabilityModel", b =>
                {
                    b.HasOne("Test_Analytics.Model.AttributeModel", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId");

                    b.HasOne("Test_Analytics.Model.ComponentModel", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Test_Analytics.Model.ProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Test_Analytics.Model.ComponentModel", b =>
                {
                    b.HasOne("Test_Analytics.Model.ProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
